{"version":3,"sources":["components/news/news.scss","mixins-functions/_mixins-sass-mq.scss","components/news/news.css","_settings.scss"],"names":[],"mappings":"AAAA;;EAAA;ACKA,sBAAA;AAmSA,qBAAA;ADlSA;EACC,sBAAA;EACA,qBAAA;AEAD;AFEC;EACC,iBAAA;EACA,gBAAA;EACA,mBAAA;EACA,gBAAA;EACA,kBAAA;AEAF;AFGC;EACC,oBAAA;EAAA,oBAAA;EAAA,aAAA;EACA,wBAAA;EAAA,qBAAA;EAAA,uBAAA;EACA,yBAAA;EAAA,sBAAA;EAAA,mBAAA;EACA,sBGTM;EHUN,YAAA;EACA,WAAA;EACA,kBAAA;EACA,6HAAA;EAAA,qHAAA;AEDF;AFGE;EACC,aGzBK;EH0BL,WAAA;EACA,YAAA;EACA,gBAAA;AEDH;AFIE;EACC,OAAA;AEFH;AFKE;EACC,QAAA;AEHH;AFIG;EACC,iCAAA;EAAA,6BAAA;EAAA,yBAAA;EACA,iBAAA;AEFJ;AFME;EACC,aAAA;AEJH;AFSE;EACC,aAAA;EACA,UAAA;EACA,UAAA;EACA,WAAA;AEPH;AFSG;EACC,UAAA;EACA,UAAA;EACA,WAAA;AEPJ;AFSI;EACC,UAAA;EACA,WAAA;EACA,kBAAA;EACA,WAAA;EACA,mBG9DS;EH+DT,kBAAA;AEPL;AFWG;EACC,WAAA;AETJ;AFWI;EACC,WAAA;AETL;AFWK;EACC,kBAAA;EACA,WAAA;EACA,yBGnEU;EHoEV,UAAA;AETN;AFgBC;EACC,oBAAA;AEdF;AFgBE;EACC,kBAAA;EACA,gBAAA;EACA,6HAAA;EAAA,qHAAA;EACA,oBAAA;EACA,kBAAA;AEdH;AFoBG;EACC,YAAA;AElBJ;AFsBE;EACC,eAAA;AEpBH;AFuBE;EACC,kBAAA;AErBH;AFsBG;EACC,qBAAA;EACA,yBAAA;EACA,cGnHI;EHoHJ,gBAAA;EACA,eAAA;EACA,kBAAA;AEpBJ;AFwBE;EACC,kBAAA;EACA,gBAAA;EACA,cG7HK;EH8HL,SAAA;EACA,gBAAA;EACA,oBAAA;EACA,gCAAA;AEtBH;AFyBE;EACC,oBAAA;EAAA,oBAAA;EAAA,aAAA;EACA,yBAAA;EAAA,sBAAA;EAAA,mBAAA;EACA,SAAA;EACA,kBAAA;EACA,2BAAA;EAAA,0BAAA;AEvBH;AFyBG;EACC,WAAA;EACA,YAAA;EACA,kBAAA;AEvBJ;AF0BG;EACC,aAAA;AExBJ;AF0BI;EACC,eAAA;EACA,gBAAA;EACA,iBAAA;EACA,cGxJG;EHyJH,iBAAA;AExBL;AF2BI;EACC,SAAA;EACA,eAAA;EACA,cG5JS;ADmId","file":"news.css","sourcesContent":["/**\n * News component styling.\n */\n @use './node_modules/sass-rem'as rem;\n@import \"../../global-includes\";\n\n.latest-news {\n\tmargin-block: 3.125rem;\n\tpadding-block: 3.5rem;\n\n\th2 {\n\t\tfont-size: 2.5rem;\n\t\tline-height: 1.2;\n\t\tmargin-bottom: 2rem;\n\t\tfont-weight: 600;\n\t\ttext-align: center;\n\t}\n\n\t.slick-arrow {\n\t\tdisplay: flex;\n\t\tjustify-content: center;\n\t\talign-items: center;\n\t\tbackground-color: $white;\n\t\theight: 40px;\n\t\twidth: 40px;\n\t\tborder-radius: 50%;\n\t\tbox-shadow: 0 0.275rem 0.75rem -0.0625rem rgba(11, 15, 25, 0.06), 0 0.125rem 0.4rem -0.0625rem rgba(11, 15, 25, 0.03);\n\n\t\tsvg {\n\t\t\tfill: $black;\n\t\t\twidth: 18px;\n\t\t\theight: 18px;\n\t\t\tmargin-left: 5px;\n\t\t}\n\n\t\t&.slick-prev {\n\t\t\tleft: 0;\n\t\t}\n\n\t\t&.slick-next {\n\t\t\tright: 0;\n\t\t\tsvg {\n\t\t\t\ttransform: rotate(180deg);\n\t\t\t\tmargin-left: -5px;\n\t\t\t}\n\t\t}\n\n\t\t&::before {\n\t\t\tdisplay: none;\n\t\t}\n\t}\n\n\t.slick-dots {\n\t\tli {\n\t\t\tmargin: 0 5px;\n\t\t\tpadding: 0;\n\t\t\twidth: 5px;\n\t\t\theight: 5px;\n\n\t\t\tbutton {\n\t\t\t\tpadding: 0;\n\t\t\t\twidth: 5px;\n\t\t\t\theight: 5px;\n\n\t\t\t\t&::before {\n\t\t\t\t\twidth: 5px;\n\t\t\t\t\theight: 5px;\n\t\t\t\t\tline-height: unset;\n\t\t\t\t\tcontent: \"\";\n\t\t\t\t\tbackground: $medium-gray;\n\t\t\t\t\tborder-radius: 50%;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t&.slick-active {\n\t\t\t\twidth: 24px;\n\n\t\t\t\tbutton {\n\t\t\t\t\twidth: 24px;\n\n\t\t\t\t\t&::before {\n\t\t\t\t\t\tborder-radius: 3px;\n\t\t\t\t\t\twidth: 24px;\n\t\t\t\t\t\tbackground-color: $primary-color;\n\t\t\t\t\t\topacity: 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t.news-cards {\n\t\tpadding-inline: 50px;\n\n\t\t.news-card {\n\t\t\tborder-radius: 8px;\n\t\t\toverflow: hidden;\n\t\t\tbox-shadow: 0 .275rem .75rem -0.0625rem rgba(11,15,25,.06),0 .125rem .4rem -0.0625rem rgba(11,15,25,.03);\n\t\t\tmargin-block: 0 1rem;\n\t\t\tmargin-inline: 7px;\n\t\t}\n\t}\n\n\t&__card {\n\t\t&-image {\n\t\t\timg {\n\t\t\t\theight: auto;\n\t\t\t}\n\t\t}\n\n\t\t&-content {\n\t\t\tpadding: 1.5rem;\n\t\t}\n\n\t\t&-tag {\n\t\t\tmargin: 0 0 12px 0;\n\t\t\ta {\n\t\t\t\ttext-decoration: none;\n\t\t\t\tbackground-color: #f3f6ff;\n\t\t\t\tcolor: $black;\n\t\t\t\tpadding: 2px 4px;\n\t\t\t\tfont-size: 14px;\n\t\t\t\tborder-radius: 4px;\n\t\t\t}\n\t\t}\n\n\t\t&-title {\n\t\t\tfont-size: 1.25rem;\n\t\t\tline-height: 1.4;\n\t\t\tcolor: $black;\n\t\t\tmargin: 0;\n\t\t\tfont-weight: 600;\n\t\t\tpadding-bottom: 1rem;\n\t\t\tborder-bottom: 1px solid #e3e5f1;\n\t\t}\n\n\t\t.doctor-profile__card {\n\t\t\tdisplay: flex;\n\t\t\talign-items: center;\n\t\t\tgap: 12px;\n\t\t\tmargin-top: 1.5rem;\n\t\t\tpadding-inline-start: 1rem;\n\n\t\t\timg {\n\t\t\t\twidth: 48px;\n\t\t\t\theight: 48px;\n\t\t\t\tborder-radius: 4px;\n\t\t\t}\n\n\t\t\t&-info {\n\t\t\t\tdisplay: grid;\n\n\t\t\t\th3 {\n\t\t\t\t\tfont-size: 14px;\n\t\t\t\t\tfont-weight: 700;\n\t\t\t\t\tline-height: 18px;\n\t\t\t\t\tcolor: $black;\n\t\t\t\t\tmargin: 0 0 6px 0;\n\t\t\t\t}\n\n\t\t\t\tp {\n\t\t\t\t\tmargin: 0;\n\t\t\t\t\tfont-size: 12px;\n\t\t\t\t\tcolor: $medium-gray;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n","// Based on https://github.com/sass-mq/sass-mq/pull/144\n@use \"sass:math\";\n@use \"sass:map\";\n@use \"sass:list\";\n\n/* stylelint-disable */\n\n/// Breakpoint list\n///\n/// Name your breakpoints in a way that creates a ubiquitous language\n/// across team members. It will improve communication between\n/// stakeholders, designers, developers, and testers.\n///\n/// @type Map\n/// @link https://github.com/sass-mq/sass-mq#seeing-the-currently-active-breakpoint Full documentation and examples\n$breakpoints: (\n  mobile: 320px,\n  tablet: 740px,\n  desktop: 980px,\n  wide: 1300px\n) !default;\n\n/// Show breakpoints in the top right corner\n///\n/// If you want to display the currently active breakpoint in the top\n/// right corner of your site during development, add the breakpoints\n/// to this list, ordered by width. For example: (mobile, tablet, desktop).\n///\n/// @example scss\n///   $show-breakpoints: (mobile, tablet, desktop);\n///   @import 'path/to/mq';\n///\n/// @type map\n$show-breakpoints: () !default;\n\n/// Customize the media type (for example: `@media screen` or `@media print`)\n/// By default sass-mq uses an \"all\" media type (`@media all and …`)\n///\n/// @type String\n/// @link https://github.com/sass-mq/sass-mq#changing-media-type Full documentation and example\n$media-type: all !default;\n\n/// Convert pixels to ems\n///\n/// @param {Number} $px - value to convert\n///\n/// @example scss\n///  $font-size-in-ems: px2em(16px);\n///  p { font-size: px2em(16px); }\n///\n/// @returns {Number}\n\n@function px2em($px) {\n  @if math.is-unitless($px) {\n    @warn \"Assuming #{$px} to be in pixels, attempting to convert it into pixels.\";\n    @return px2em($px * 1px);\n  }\n  // if $px is compatible with em units then return value unchanged\n  @if math.compatible($px, 1em) {\n    @return $px;\n  }\n  @return math.div($px, 16px) * 1em;\n}\n\n/// Get a breakpoint's width\n///\n/// @param {String} $name - Name of the breakpoint. One of $breakpoints\n///\n/// @example scss\n///  $tablet-width: get-breakpoint-width(tablet);\n///  @media (min-width: get-breakpoint-width(desktop)) {}\n///\n/// @requires {Variable} $breakpoints\n///\n/// @returns {Number} Value in pixels\n@function get-breakpoint-width($name, $breakpoints: $breakpoints) {\n  @if map.has-key($breakpoints, $name) {\n    @return map.get($breakpoints, $name);\n  } @else {\n    @warn \"Breakpoint #{$name} wasn't found in $breakpoints.\";\n    @return null;\n  }\n\n}\n\n/// Media Query mixin\n///\n/// @param {String | Boolean} $from [false] - One of $breakpoints\n/// @param {String | Boolean} $until [false] - One of $breakpoints\n/// @param {String | Boolean} $and [false] - Additional media query parameters\n/// @param {String} $media-type [$media-type] - Media type: screen, print…\n///\n/// @ignore Undocumented API, for advanced use only:\n/// @ignore @param {Map} $breakpoints [$breakpoints]\n///\n/// @content styling rules, wrapped into a @media query when $responsive is true\n///\n/// @requires {Variable} $media-type\n/// @requires {Variable} $breakpoints\n/// @requires {function} px2em\n/// @requires {function} get-breakpoint-width\n///\n/// @link https://github.com/sass-mq/sass-mq#responsive-mode-on-default Full documentation and examples\n///\n/// @example scss\n///  .element {\n///    @include mq($from: mobile) {\n///      color: red;\n///    }\n///    @include mq($until: tablet) {\n///      color: blue;\n///    }\n///    @include mq(mobile, tablet) {\n///      color: green;\n///    }\n///    @include mq($from: tablet, $and: '(orientation: landscape)') {\n///      color: teal;\n///    }\n///    @include mq(950px) {\n///      color: hotpink;\n///    }\n///    @include mq(tablet, $media-type: screen) {\n///      color: hotpink;\n///    }\n///    // Advanced use:\n///    $my-breakpoints: (L: 900px, XL: 1200px);\n///    @include mq(L, $breakpoints: $my-breakpoints) {\n///      color: hotpink;\n///    }\n///  }\n@mixin mq(\n  $from: false,\n  $until: false,\n  $and: false,\n  $media-type: $media-type,\n  $breakpoints: $breakpoints,\n) {\n  $min-width: 0;\n  $max-width: 0;\n  $media-query: '';\n\n  // From: this breakpoint (inclusive)\n  @if $from {\n    @if type-of($from) == number {\n      $min-width: px2em($from);\n    } @else {\n      $min-width: px2em(get-breakpoint-width($from, $breakpoints));\n    }\n  }\n\n  // Until: that breakpoint (exclusive)\n  @if $until {\n    @if type-of($until) == number {\n      $max-width: px2em($until);\n    } @else {\n      $max-width: px2em(get-breakpoint-width($until, $breakpoints)) - .01em;\n    }\n  }\n\n  @if $min-width != 0 {\n    $media-query: '#{$media-query} and (min-width: #{$min-width})';\n  }\n  @if $max-width != 0 {\n    $media-query: '#{$media-query} and (max-width: #{$max-width})';\n  }\n  @if $and {\n    $media-query: '#{$media-query} and #{$and}';\n  }\n\n  // Remove unnecessary media query prefix 'all and '\n  @if ($media-type == 'all' and $media-query != '') {\n    $media-type: '';\n    $media-query: str-slice(unquote($media-query), 6);\n  }\n\n  @media #{$media-type + $media-query} {\n    @content;\n  }\n\n}\n\n/// Quick sort\n///\n/// @author Sam Richards\n/// @access private\n/// @param {List} $list - List to sort\n/// @returns {List} Sorted List\n@function _quick-sort($list) {\n  $less: ();\n  $equal: ();\n  $large: ();\n\n  @if length($list) > 1 {\n    $seed: list.nth($list, math.ceil(math.div(length($list), 2)));\n\n    @each $item in $list {\n      @if ($item == $seed) {\n        $equal: list.append($equal, $item);\n      } @else if ($item < $seed) {\n        $less: list.append($less, $item);\n      } @else if ($item > $seed) {\n        $large: list.append($large, $item);\n      }\n    }\n\n    @return join(join(_quick-sort($less), $equal), _quick-sort($large));\n  }\n\n  @return $list;\n}\n\n/// Sort a map by values (works with numbers only)\n///\n/// @access private\n/// @param {Map} $map - Map to sort\n/// @returns {Map} Map sorted by value\n@function _map-sort-by-value($map) {\n  $map-sorted: ();\n  $map-keys: map.keys($map);\n  $map-values: map.values($map);\n  $map-values-sorted: _quick-sort($map-values);\n\n  // Reorder key/value pairs based on key values\n  @each $value in $map-values-sorted {\n    $index: index($map-values, $value);\n    $key: list.nth($map-keys, $index);\n    $map-sorted: map.merge($map-sorted, ($key: $value));\n\n    // Unset the value in $map-values to prevent the loop\n    // from finding the same index twice\n    $map-values: list.set-nth($map-values, $index, 0);\n  }\n\n  @return $map-sorted;\n}\n\n/// Add a breakpoint\n///\n/// @param {String} $name - Name of the breakpoint\n/// @param {Number} $width - Width of the breakpoint\n///\n/// @requires {Variable} $breakpoints\n///\n/// @example scss\n///  @include add-breakpoint(tvscreen, 1920px);\n///  @include mq(tvscreen) {}\n@mixin add-breakpoint($name, $width) {\n  $new-breakpoint: ($name: $width);\n  $breakpoints: map.merge($breakpoints, $new-breakpoint) !global;\n  $breakpoints: _map-sort-by-value($breakpoints) !global;\n}\n\n/// Show the active breakpoint in the top right corner of the viewport\n/// @link https://github.com/sass-mq/sass-mq#seeing-the-currently-active-breakpoint\n///\n/// @param {List} $show-breakpoints [$show-breakpoints] - List of breakpoints to show in the top right corner\n/// @param {Map} $breakpoints [$breakpoints] - Breakpoint names and sizes\n///\n/// @requires {Variable} $breakpoints\n/// @requires {Variable} $show-breakpoints\n///\n/// @example scss\n///  // Show breakpoints using global settings\n///  @include show-breakpoints;\n///\n///  // Show breakpoints using custom settings\n///  @include show-breakpoints((L, XL), (S: 300px, L: 800px, XL: 1200px));\n@mixin show-breakpoints($show-breakpoints: $show-breakpoints, $breakpoints: $breakpoints) {\n  body:before {\n    background-color: #FCF8E3;\n    border-bottom: 1px solid #FBEED5;\n    border-left: 1px solid #FBEED5;\n    color: #C09853;\n    font: small-caption;\n    padding: 3px 6px;\n    pointer-events: none;\n    position: fixed;\n    right: 0;\n    top: 0;\n    z-index: 100;\n\n    // Loop through the breakpoints that should be shown\n    @each $show-breakpoint in $show-breakpoints {\n      $width: get-breakpoint-width($show-breakpoint, $breakpoints);\n      @include mq($show-breakpoint, $breakpoints: $breakpoints) {\n        content: \"#{$show-breakpoint} ≥ #{$width} (#{px2em($width)})\";\n      }\n    }\n\n  }\n}\n\n@if list.length($show-breakpoints) > 0 {\n  @include show-breakpoints;\n}\n\n/* stylelint-enable */\n","/**\n * News component styling.\n */\n/* stylelint-disable */\n/* stylelint-enable */\n.latest-news {\n  margin-block: 3.125rem;\n  padding-block: 3.5rem;\n}\n.latest-news h2 {\n  font-size: 2.5rem;\n  line-height: 1.2;\n  margin-bottom: 2rem;\n  font-weight: 600;\n  text-align: center;\n}\n.latest-news .slick-arrow {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: #fff;\n  height: 40px;\n  width: 40px;\n  border-radius: 50%;\n  box-shadow: 0 0.275rem 0.75rem -0.0625rem rgba(11, 15, 25, 0.06), 0 0.125rem 0.4rem -0.0625rem rgba(11, 15, 25, 0.03);\n}\n.latest-news .slick-arrow svg {\n  fill: #212121;\n  width: 18px;\n  height: 18px;\n  margin-left: 5px;\n}\n.latest-news .slick-arrow.slick-prev {\n  left: 0;\n}\n.latest-news .slick-arrow.slick-next {\n  right: 0;\n}\n.latest-news .slick-arrow.slick-next svg {\n  transform: rotate(180deg);\n  margin-left: -5px;\n}\n.latest-news .slick-arrow::before {\n  display: none;\n}\n.latest-news .slick-dots li {\n  margin: 0 5px;\n  padding: 0;\n  width: 5px;\n  height: 5px;\n}\n.latest-news .slick-dots li button {\n  padding: 0;\n  width: 5px;\n  height: 5px;\n}\n.latest-news .slick-dots li button::before {\n  width: 5px;\n  height: 5px;\n  line-height: unset;\n  content: \"\";\n  background: #98928a;\n  border-radius: 50%;\n}\n.latest-news .slick-dots li.slick-active {\n  width: 24px;\n}\n.latest-news .slick-dots li.slick-active button {\n  width: 24px;\n}\n.latest-news .slick-dots li.slick-active button::before {\n  border-radius: 3px;\n  width: 24px;\n  background-color: #6466f1;\n  opacity: 1;\n}\n.latest-news .news-cards {\n  padding-inline: 50px;\n}\n.latest-news .news-cards .news-card {\n  border-radius: 8px;\n  overflow: hidden;\n  box-shadow: 0 0.275rem 0.75rem -0.0625rem rgba(11, 15, 25, 0.06), 0 0.125rem 0.4rem -0.0625rem rgba(11, 15, 25, 0.03);\n  margin-block: 0 1rem;\n  margin-inline: 7px;\n}\n.latest-news__card-image img {\n  height: auto;\n}\n.latest-news__card-content {\n  padding: 1.5rem;\n}\n.latest-news__card-tag {\n  margin: 0 0 12px 0;\n}\n.latest-news__card-tag a {\n  text-decoration: none;\n  background-color: #f3f6ff;\n  color: #212121;\n  padding: 2px 4px;\n  font-size: 14px;\n  border-radius: 4px;\n}\n.latest-news__card-title {\n  font-size: 1.25rem;\n  line-height: 1.4;\n  color: #212121;\n  margin: 0;\n  font-weight: 600;\n  padding-bottom: 1rem;\n  border-bottom: 1px solid #e3e5f1;\n}\n.latest-news__card .doctor-profile__card {\n  display: flex;\n  align-items: center;\n  gap: 12px;\n  margin-top: 1.5rem;\n  padding-inline-start: 1rem;\n}\n.latest-news__card .doctor-profile__card img {\n  width: 48px;\n  height: 48px;\n  border-radius: 4px;\n}\n.latest-news__card .doctor-profile__card-info {\n  display: grid;\n}\n.latest-news__card .doctor-profile__card-info h3 {\n  font-size: 14px;\n  font-weight: 700;\n  line-height: 18px;\n  color: #212121;\n  margin: 0 0 6px 0;\n}\n.latest-news__card .doctor-profile__card-info p {\n  margin: 0;\n  font-size: 12px;\n  color: #98928a;\n}","$font-sans: sans-serif;\n\n// Gray tones.\n$true-black: #000;\n$black: #212121;\n$charcoal: #404040;\n$dark-gray: #6f6f6f;\n$medium-gray: #98928a;\n$gray: #b7b7b7;\n$light-gray: #dadada;\n$x-light-gray: #f8f6f3;\n$pale-gray: #eee;\n$off-white: #f5f5f5;\n$white: #fff;\n\n// Core colors.\n$primary-color: #6466f1;\n$primary-color-100: #6366f1;\n$primary-color-50: #f4f6ff;\n$secondary-color: #22c55d;\n$green: #69cec3;\n\n// For usage with the container mixin.\n$small_desktop: 1024px;\n$desktop: 1280px;\n\n// Breakpoints.\n// https://app.zeplin.io/project/5e6682f618ae0f143906fcd7/screen/5e66aa6445b013115f8e1a8e\n// Note, $mobile, $small_desktop, and $desktop mirror the names that are in the designs.\n// Map for sass MQ.\n$breakpoints: (\n  small: 0,\n  mobile: 375px,\n  small_plus: 520px,\n  medium: 768px,\n  medium-large: 920px,\n  small_desktop: 1024px,\n  med_desktop: 1140px,\n  desktop: 1280px,\n  x_wide: 1440px,\n);\n\n// Uncomment to debug breakpoints.\n//$mq-show-breakpoints: (small, mobile, small_plus, medium, medium-large, small_desktop, desktop, x_wide);\n\n$a-tags-hover: '&:active, &:focus, &:hover ';\n\n// Form varaibles.\n$md-radio-border-color: rgba(0, 0, 0, 0.6);\n$md-radio-size: 30px;\n$md-radio-checked-size: 15px;\n$md-radio-ripple-size: 15px;\n"]}