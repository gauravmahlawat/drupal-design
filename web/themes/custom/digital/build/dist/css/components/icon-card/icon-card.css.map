{"version":3,"sources":["components/icon-card/icon-card.scss","mixins-functions/_mixins-sass-mq.scss","components/icon-card/icon-card.css","_settings.scss"],"names":[],"mappings":"AAAA;;EAAA;ACIA,sBAAA;AAmSA,qBAAA;ADhSE;EACA,8BAAA;EAAA,2BAAA;EACA,sBAAA;EACA,oBAAA;EAAA,oBAAA;EAAA,aAAA;EACA,mBAAA;EAAA,eAAA;EACA,WAAA;AEDF;AFGE;EACC,mBAAA;EAAA,iCAAA;EAAA,6BAAA;EACA,6JAAA;EAAA,qJAAA;EAAA,wIAAA;EAAA,qIAAA;EAAA,8MAAA;EACA,qBAAA;EACA,0CAAA;EACA,kBAAA;EACA,gBAAA;EACA,eAAA;AEDH;AFGG;EACC,oEAAA;EAAA,4DAAA;AEDJ;AFIG;EACC,oBAAA;EAAA,oBAAA;EAAA,aAAA;EACA,8BAAA;EAAA,6BAAA;EAAA,uBAAA;EAAA,mBAAA;EACA,yBAAA;EAAA,sBAAA;EAAA,mBAAA;AEFJ;AFMI;EACC,eAAA;EACA,YAAA;EACA,gBAAA;EACA,YAAA;AEJL;AFQG;EACC,aAAA;AENJ;AFQI;EACC,oBAAA;EAAA,oBAAA;EAAA,aAAA;EACA,QAAA;EACA,kBAAA;EACA,gBAAA;EACA,cG3CS;EH4CT,kBAAA;AENL;AFSI;EACC,mBAAA;EACA,gBAAA;EACA,mBAAA;EACA,WGvDQ;EHwDR,gBAAA;AEPL;AFUI;EACC,eAAA;EACA,cG5DG;EH6DH,kBAAA;AERL;AFWI;EACC,YAAA;EACA,iBAAA;EACA,yBAAA;EAAA,sBAAA;EAAA,mBAAA;EACA,oBAAA;EAAA,oBAAA;EAAA,aAAA;EACA,QAAA;EACA,eAAA;EACA,gBAAA;EACA,6BAAA;AETL;AFWK;EACC,uBAAA;EACA,YAAA;EACA,cGjEU;ADwDhB;AFWM;EACC,aGpES;AD2DhB;AFaK;EACC,WAAA;EACA,YAAA;AEXN","file":"icon-card.css","sourcesContent":["/**\n * Icon card component styling.\n */\n @use './node_modules/sass-rem'as rem;\n@import \"../../global-includes\";\n\n.icon {\n  &-cards {\n\t\tpadding-block-start: 3.5rem;\n\t\tmargin-block: rem.convert(50px);\n\t\tdisplay: flex;\n\t\tflex-wrap: wrap;\n\t\tgap: rem.convert(24px);\n\n\t\t.icon-card {\n\t\t\tflex: 1 1 calc(33.33% - 16px);\n\t\t\ttransition: transform .2s ease-in-out, border-color .2s ease-in-out, background-color .2s ease-in-out, box-shadow .2s ease-in-out;\n\t\t\tword-wrap: break-word;\n\t\t\tborder: 1px solid rgba(99, 102, 241, .35);\n\t\t\tborder-radius: 8px;\n\t\t\toverflow: hidden;\n\t\t\tcursor: pointer;\n\n\t\t\t&:hover {\n\t\t\t\tbox-shadow: 0 .5rem 1.125rem -0.50rem rgba(92, 94, 225, 0.9);\n\t\t\t}\n\n\t\t\t&__wrappar {\n\t\t\t\tdisplay: flex;\n\t\t\t\tflex-direction: row;\n\t\t\t\talign-items: center;\n\t\t\t}\n\n\t\t\t&__image {\n\t\t\t\timg {\n\t\t\t\t\tmax-width: 100%;\n\t\t\t\t\twidth: 170px;\n\t\t\t\t\tmin-width: 170px;\n\t\t\t\t\theight: auto;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t&__body {\n\t\t\t\tpadding: 22px;\n\n\t\t\t\t&-phone {\n\t\t\t\t\tdisplay: flex;\n\t\t\t\t\tgap: 4px;\n\t\t\t\t\tfont-size: 1.25rem;\n\t\t\t\t\tfont-weight: 600;\n\t\t\t\t\tcolor: $medium-gray;\n\t\t\t\t\tmargin-bottom: 8px;\n\t\t\t\t}\n\n\t\t\t\th3 {\n\t\t\t\t\tfont-size: 1.125rem;\n\t\t\t\t\tline-height: 1.4;\n\t\t\t\t\tmargin-bottom: 1rem;\n\t\t\t\t\tcolor: $true-black;\n\t\t\t\t\tfont-weight: 600;\n\t\t\t\t}\n\n\t\t\t\tp {\n\t\t\t\t\tfont-size: 14px;\n\t\t\t\t\tcolor: $black;\n\t\t\t\t\tmargin-bottom: 4px;\n\t\t\t\t}\n\n\t\t\t\t.btn {\n\t\t\t\t\tborder: none;\n\t\t\t\t\tpadding-inline: 0;\n\t\t\t\t\talign-items: center;\n\t\t\t\t\tdisplay: flex;\n\t\t\t\t\tgap: 4px;\n\t\t\t\t\tfont-size: 14px;\n\t\t\t\t\tfont-weight: 600;\n\t\t\t\t\tbackground-color: transparent;\n\n\t\t\t\t\t&:hover {\n\t\t\t\t\t\tbackground-color: unset;\n\t\t\t\t\t\tborder: none;\n\t\t\t\t\t\tcolor: $primary-color;\n\n\t\t\t\t\t\tsvg {\n\t\t\t\t\t\t\tfill: $primary-color;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tsvg {\n\t\t\t\t\t\twidth: 1rem;\n\t\t\t\t\t\theight: 1rem;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t}\n\t}\n}\n","@use \"sass:math\";\n@use \"sass:map\";\n@use \"sass:list\";\n\n/* stylelint-disable */\n\n/// Breakpoint list\n///\n/// Name your breakpoints in a way that creates a ubiquitous language\n/// across team members. It will improve communication between\n/// stakeholders, designers, developers, and testers.\n///\n/// @type Map\n/// @link https://github.com/sass-mq/sass-mq#seeing-the-currently-active-breakpoint Full documentation and examples\n$breakpoints: (\n  mobile: 320px,\n  tablet: 740px,\n  desktop: 980px,\n  wide: 1300px\n) !default;\n\n/// Show breakpoints in the top right corner\n///\n/// If you want to display the currently active breakpoint in the top\n/// right corner of your site during development, add the breakpoints\n/// to this list, ordered by width. For example: (mobile, tablet, desktop).\n///\n/// @example scss\n///   $show-breakpoints: (mobile, tablet, desktop);\n///   @import 'path/to/mq';\n///\n/// @type map\n$show-breakpoints: () !default;\n\n/// Customize the media type (for example: `@media screen` or `@media print`)\n/// By default sass-mq uses an \"all\" media type (`@media all and …`)\n///\n/// @type String\n/// @link https://github.com/sass-mq/sass-mq#changing-media-type Full documentation and example\n$media-type: all !default;\n\n/// Convert pixels to ems\n///\n/// @param {Number} $px - value to convert\n///\n/// @example scss\n///  $font-size-in-ems: px2em(16px);\n///  p { font-size: px2em(16px); }\n///\n/// @returns {Number}\n\n@function px2em($px) {\n  @if math.is-unitless($px) {\n    @warn \"Assuming #{$px} to be in pixels, attempting to convert it into pixels.\";\n    @return px2em($px * 1px);\n  }\n  // if $px is compatible with em units then return value unchanged\n  @if math.compatible($px, 1em) {\n    @return $px;\n  }\n  @return math.div($px, 16px) * 1em;\n}\n\n/// Get a breakpoint's width\n///\n/// @param {String} $name - Name of the breakpoint. One of $breakpoints\n///\n/// @example scss\n///  $tablet-width: get-breakpoint-width(tablet);\n///  @media (min-width: get-breakpoint-width(desktop)) {}\n///\n/// @requires {Variable} $breakpoints\n///\n/// @returns {Number} Value in pixels\n@function get-breakpoint-width($name, $breakpoints: $breakpoints) {\n  @if map.has-key($breakpoints, $name) {\n    @return map.get($breakpoints, $name);\n  } @else {\n    @warn \"Breakpoint #{$name} wasn't found in $breakpoints.\";\n    @return null;\n  }\n\n}\n\n/// Media Query mixin\n///\n/// @param {String | Boolean} $from [false] - One of $breakpoints\n/// @param {String | Boolean} $until [false] - One of $breakpoints\n/// @param {String | Boolean} $and [false] - Additional media query parameters\n/// @param {String} $media-type [$media-type] - Media type: screen, print…\n///\n/// @ignore Undocumented API, for advanced use only:\n/// @ignore @param {Map} $breakpoints [$breakpoints]\n///\n/// @content styling rules, wrapped into a @media query when $responsive is true\n///\n/// @requires {Variable} $media-type\n/// @requires {Variable} $breakpoints\n/// @requires {function} px2em\n/// @requires {function} get-breakpoint-width\n///\n/// @link https://github.com/sass-mq/sass-mq#responsive-mode-on-default Full documentation and examples\n///\n/// @example scss\n///  .element {\n///    @include mq($from: mobile) {\n///      color: red;\n///    }\n///    @include mq($until: tablet) {\n///      color: blue;\n///    }\n///    @include mq(mobile, tablet) {\n///      color: green;\n///    }\n///    @include mq($from: tablet, $and: '(orientation: landscape)') {\n///      color: teal;\n///    }\n///    @include mq(950px) {\n///      color: hotpink;\n///    }\n///    @include mq(tablet, $media-type: screen) {\n///      color: hotpink;\n///    }\n///    // Advanced use:\n///    $my-breakpoints: (L: 900px, XL: 1200px);\n///    @include mq(L, $breakpoints: $my-breakpoints) {\n///      color: hotpink;\n///    }\n///  }\n@mixin mq(\n  $from: false,\n  $until: false,\n  $and: false,\n  $media-type: $media-type,\n  $breakpoints: $breakpoints,\n) {\n  $min-width: 0;\n  $max-width: 0;\n  $media-query: '';\n\n  // From: this breakpoint (inclusive)\n  @if $from {\n    @if type-of($from) == number {\n      $min-width: px2em($from);\n    } @else {\n      $min-width: px2em(get-breakpoint-width($from, $breakpoints));\n    }\n  }\n\n  // Until: that breakpoint (exclusive)\n  @if $until {\n    @if type-of($until) == number {\n      $max-width: px2em($until);\n    } @else {\n      $max-width: px2em(get-breakpoint-width($until, $breakpoints)) - .01em;\n    }\n  }\n\n  @if $min-width != 0 {\n    $media-query: '#{$media-query} and (min-width: #{$min-width})';\n  }\n  @if $max-width != 0 {\n    $media-query: '#{$media-query} and (max-width: #{$max-width})';\n  }\n  @if $and {\n    $media-query: '#{$media-query} and #{$and}';\n  }\n\n  // Remove unnecessary media query prefix 'all and '\n  @if ($media-type == 'all' and $media-query != '') {\n    $media-type: '';\n    $media-query: str-slice(unquote($media-query), 6);\n  }\n\n  @media #{$media-type + $media-query} {\n    @content;\n  }\n\n}\n\n/// Quick sort\n///\n/// @author Sam Richards\n/// @access private\n/// @param {List} $list - List to sort\n/// @returns {List} Sorted List\n@function _quick-sort($list) {\n  $less: ();\n  $equal: ();\n  $large: ();\n\n  @if length($list) > 1 {\n    $seed: list.nth($list, math.ceil(math.div(length($list), 2)));\n\n    @each $item in $list {\n      @if ($item == $seed) {\n        $equal: list.append($equal, $item);\n      } @else if ($item < $seed) {\n        $less: list.append($less, $item);\n      } @else if ($item > $seed) {\n        $large: list.append($large, $item);\n      }\n    }\n\n    @return join(join(_quick-sort($less), $equal), _quick-sort($large));\n  }\n\n  @return $list;\n}\n\n/// Sort a map by values (works with numbers only)\n///\n/// @access private\n/// @param {Map} $map - Map to sort\n/// @returns {Map} Map sorted by value\n@function _map-sort-by-value($map) {\n  $map-sorted: ();\n  $map-keys: map.keys($map);\n  $map-values: map.values($map);\n  $map-values-sorted: _quick-sort($map-values);\n\n  // Reorder key/value pairs based on key values\n  @each $value in $map-values-sorted {\n    $index: index($map-values, $value);\n    $key: list.nth($map-keys, $index);\n    $map-sorted: map.merge($map-sorted, ($key: $value));\n\n    // Unset the value in $map-values to prevent the loop\n    // from finding the same index twice\n    $map-values: list.set-nth($map-values, $index, 0);\n  }\n\n  @return $map-sorted;\n}\n\n/// Add a breakpoint\n///\n/// @param {String} $name - Name of the breakpoint\n/// @param {Number} $width - Width of the breakpoint\n///\n/// @requires {Variable} $breakpoints\n///\n/// @example scss\n///  @include add-breakpoint(tvscreen, 1920px);\n///  @include mq(tvscreen) {}\n@mixin add-breakpoint($name, $width) {\n  $new-breakpoint: ($name: $width);\n  $breakpoints: map.merge($breakpoints, $new-breakpoint) !global;\n  $breakpoints: _map-sort-by-value($breakpoints) !global;\n}\n\n/// Show the active breakpoint in the top right corner of the viewport\n/// @link https://github.com/sass-mq/sass-mq#seeing-the-currently-active-breakpoint\n///\n/// @param {List} $show-breakpoints [$show-breakpoints] - List of breakpoints to show in the top right corner\n/// @param {Map} $breakpoints [$breakpoints] - Breakpoint names and sizes\n///\n/// @requires {Variable} $breakpoints\n/// @requires {Variable} $show-breakpoints\n///\n/// @example scss\n///  // Show breakpoints using global settings\n///  @include show-breakpoints;\n///\n///  // Show breakpoints using custom settings\n///  @include show-breakpoints((L, XL), (S: 300px, L: 800px, XL: 1200px));\n@mixin show-breakpoints($show-breakpoints: $show-breakpoints, $breakpoints: $breakpoints) {\n  body:before {\n    background-color: #FCF8E3;\n    border-bottom: 1px solid #FBEED5;\n    border-left: 1px solid #FBEED5;\n    color: #C09853;\n    font: small-caption;\n    padding: 3px 6px;\n    pointer-events: none;\n    position: fixed;\n    right: 0;\n    top: 0;\n    z-index: 100;\n\n    // Loop through the breakpoints that should be shown\n    @each $show-breakpoint in $show-breakpoints {\n      $width: get-breakpoint-width($show-breakpoint, $breakpoints);\n      @include mq($show-breakpoint, $breakpoints: $breakpoints) {\n        content: \"#{$show-breakpoint} ≥ #{$width} (#{px2em($width)})\";\n      }\n    }\n\n  }\n}\n\n@if list.length($show-breakpoints) > 0 {\n  @include show-breakpoints;\n}\n\n/* stylelint-enable */\n","/**\n * Icon card component styling.\n */\n/* stylelint-disable */\n/* stylelint-enable */\n.icon-cards {\n  padding-block-start: 3.5rem;\n  margin-block: 3.125rem;\n  display: flex;\n  flex-wrap: wrap;\n  gap: 1.5rem;\n}\n.icon-cards .icon-card {\n  flex: 1 1 calc(33.33% - 16px);\n  transition: transform 0.2s ease-in-out, border-color 0.2s ease-in-out, background-color 0.2s ease-in-out, box-shadow 0.2s ease-in-out;\n  word-wrap: break-word;\n  border: 1px solid rgba(99, 102, 241, 0.35);\n  border-radius: 8px;\n  overflow: hidden;\n  cursor: pointer;\n}\n.icon-cards .icon-card:hover {\n  box-shadow: 0 0.5rem 1.125rem -0.5rem rgba(92, 94, 225, 0.9);\n}\n.icon-cards .icon-card__wrappar {\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n}\n.icon-cards .icon-card__image img {\n  max-width: 100%;\n  width: 170px;\n  min-width: 170px;\n  height: auto;\n}\n.icon-cards .icon-card__body {\n  padding: 22px;\n}\n.icon-cards .icon-card__body-phone {\n  display: flex;\n  gap: 4px;\n  font-size: 1.25rem;\n  font-weight: 600;\n  color: #98928a;\n  margin-bottom: 8px;\n}\n.icon-cards .icon-card__body h3 {\n  font-size: 1.125rem;\n  line-height: 1.4;\n  margin-bottom: 1rem;\n  color: #000;\n  font-weight: 600;\n}\n.icon-cards .icon-card__body p {\n  font-size: 14px;\n  color: #212121;\n  margin-bottom: 4px;\n}\n.icon-cards .icon-card__body .btn {\n  border: none;\n  padding-inline: 0;\n  align-items: center;\n  display: flex;\n  gap: 4px;\n  font-size: 14px;\n  font-weight: 600;\n  background-color: transparent;\n}\n.icon-cards .icon-card__body .btn:hover {\n  background-color: unset;\n  border: none;\n  color: #6466f1;\n}\n.icon-cards .icon-card__body .btn:hover svg {\n  fill: #6466f1;\n}\n.icon-cards .icon-card__body .btn svg {\n  width: 1rem;\n  height: 1rem;\n}","$font-sans: sans-serif;\n\n// Gray tones.\n$true-black: #000;\n$black: #212121;\n$charcoal: #404040;\n$dark-gray: #6f6f6f;\n$medium-gray: #98928a;\n$gray: #b7b7b7;\n$light-gray: #dadada;\n$x-light-gray: #f8f6f3;\n$pale-gray: #eee;\n$off-white: #f5f5f5;\n$white: #fff;\n\n// Core colors.\n$primary-color: #6466f1;\n$primary-color-100: #6366f1;\n$primary-color-50: #f4f6ff;\n$secondary-color: #22c55d;\n$green: #69cec3;\n\n// For usage with the container mixin.\n$small_desktop: 1024px;\n$desktop: 1280px;\n\n// Breakpoints.\n$breakpoints: (\n  small: 0,\n  mobile: 375px,\n  small_plus: 520px,\n  medium: 768px,\n  medium-large: 920px,\n  small_desktop: 1024px,\n  med_desktop: 1140px,\n  desktop: 1280px,\n  x_wide: 1440px,\n);\n\n// Uncomment to debug breakpoints.\n//$mq-show-breakpoints: (small, mobile, small_plus, medium, medium-large, small_desktop, desktop, x_wide);\n\n$a-tags-hover: '&:active, &:focus, &:hover ';\n"]}